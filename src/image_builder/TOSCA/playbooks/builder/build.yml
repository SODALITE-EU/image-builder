---
- hosts: all
  gather_facts: no
  tasks:
    - name: Configure image_builder
      set_fact:
        workdir: "/home/image_builder/{{ 99999999 | random | to_uuid }}"

    - name: Set custom workdir
      set_fact:
        workdir: "{{ playbook_dir }}/{{ custom_workdir}}/{{ 99999999 | random | to_uuid }}"
      when: custom_workdir is defined and custom_workdir is not none and custom_workdir != ""

    - name: Set default values for docker build
      set_fact:
        build_workdir: "{{ workdir }}"
        dockerfile_path: "{{ workdir }}/Dockerfile"

    - name: Validate input data
      block:
        - name: Check which values are defined
          set_fact:
            dockerfile_defined: "{{ source.dockerfile is defined and source.dockerfile is not none | bool }}"
            git_repo_defined: "{{ source.git_repo is defined and source.git_repo is not none | bool }}"
            build_context_defined: "{{ source.build_context is defined and source.build_context is not none | bool }}"
            target_registry_defined: "{{ target.registry_ip is defined and target.registry_ip is not none | bool }}"
            target_images_defined: "{{ target.images is defined and target.images is not none | bool }}"

        - name: Determine current image building mode
          set_fact:
            dockerfile_mode: "{{ dockerfile_defined and not git_repo_defined | bool }}"
            git_mode: "{{ git_repo_defined and not dockerfile_defined and not build_context_defined | bool }}"

        - name: Validate input data
          assert:
            that:
              - target_registry_defined
              - dockerfile_mode or git_mode

    - name: Create workdir
      file:
        path: "{{ workdir }}"
        state: directory

    # mode: dockerfile

    - name: set empty build_context
      set_fact:
        build_context: "{{ source.build_context | default([], true) }}"

    - name: Add build context for Dockerfile from git
      git:
        repo: "{{ git_url }}"
        dest: "{{ workdir }}"
      vars:
        authentication: "{{ build_context.password is defined and build_context.password is not none and build_context.username is defined and build_context.username is not none }}"
        url_authentication: "https://{{ build_context.username | default(omit) }}:{{ build_context.password | default(omit) }}@{{ build_context.url[8:] }}"
        git_url: "{{ url_authentication if authentication == true else build_context.url }}"
      when: dockerfile_mode and build_context_defined

    - name: Download Dockerfile
      get_url:
        url: "{{ dockerfile_url }}"
        dest: "{{ workdir }}/Dockerfile"
      vars:
        authentication: "{{ source.dockerfile.password is defined and source.dockerfile.password is not none and source.dockerfile.username is defined and source.dockerfile.username is not none }}"
        url_authentication: "https://{{ source.dockerfile.username | default(omit) }}:{{ source.dockerfile.password | default(omit) }}@{{ source.dockerfile.url[8:] }}"
        dockerfile_url: "{{ url_authentication if authentication == true else source.dockerfile.url }}"
      when: dockerfile_mode

    - name: Set Git repo clone path with subdir definition
      set_fact:
        build_workdir: "{{ workdir }}/{{ build_context.subdir }}"
      when: dockerfile_mode and build_context_defined and build_context.subdir is defined

    # mode: git
    - name: Pull git repository
      git:
        repo: "{{ git_url }}"
        dest: "{{ workdir }}"
        version: "{{ source.git_repo.version | default('HEAD') }}"
      vars:
        authentication: "{{ source.git_repo.password is defined and source.git_repo.password is not none and source.git_repo.username is defined and source.git_repo.username is not none }}"
        url_authentication: "https://{{ source.git_repo.username | default(omit) }}:{{ source.git_repo.password | default(omit) }}@{{ source.git_repo.url[8:] }}"
        git_url: "{{ url_authentication if authentication == true else source.git_repo.url }}"
      when: git_mode

    - name: Set build workdir
      set_fact:
        build_workdir: "{{ workdir }}/{{ source.git_repo.workdir }}"
      when: source.git_repo.workdir is defined and source.git_repo.workdir is not none

    - name: Set dockerfile path
      set_fact:
        dockerfile_path: "{{ workdir }}/{{ source.git_repo.dockerfile }}"
      when: source.git_repo.dockerfile is defined and source.git_repo.dockerfile is not none

    # image variants configuration

    - name: Preparing Dockerfile for BASE_IMAGE injection
      # Match both 'FROM base' and 'FROM base as xxx' cases, with and without :version specifications.
      # This will rewrite the first instance of the FROM line to be:
      #
      # ARG BASE_IMAGE=base:latest
      # FROM ${BASE_IMAGE} as builder
      #
      # allowing the BASE_IMAGE to be overloaded by the image builder when building image variants.
      shell: sed -i -e '1 s/\(FROM\) \([a-z:]*\)\([ \t].*$\)/ARG BASE_IMAGE=\2\n\1 \${BASE_IMAGE}\3/' \
                    -e '1 s/\(FROM\) \([a-z:].*$\)/ARG BASE_IMAGE=\2\n\1 \${BASE_IMAGE}/' \
                   "{{ dockerfile_path }}"
      args:
        # sed does a better job of this than the replace module, silence warnings about its use.
        warn: false

    - name: Extract default base image from Dockerfile
      shell: sed q "{{ dockerfile_path }}" | sed -e 's/^.*=//g'
      register: base_image_data
      args:
        warn: false

    - name: Preserving default base image
      set_fact:
        default_base_image: "{{ base_image_data.stdout }}"

    # multi-arch configuration
    - name: Parse platform list
      set_fact:
        target_platforms: "{{ target.platforms | default(['linux/amd64'], true) | join(',') }}"

    # Build image variants
    - name: Build images
      ansible.builtin.shell:
        chdir: "{{ build_workdir }}"
        cmd: "docker buildx build --file {{ dockerfile_path }} -t \"{{ target.registry_ip }}/{{ item.image }}:{{ item.tag }}\" --build-arg {{ item.base | default(default_base_image, true) }} --platform \"{{ target_platforms }}\" --push ."
      loop: "{{ target.images }}"

    - name: Clean workdir
      file:
        state: absent
        path: "{{ workdir }}"
