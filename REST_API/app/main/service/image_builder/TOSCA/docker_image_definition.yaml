tosca_definitions_version: tosca_simple_yaml_1_3

data_types:
  mytypes.Source:
    derived_from: map
    description: Docker image source. Could be either tar archive or Dockerfile with optional build context
    properties:
      type:
        type: string
        description: One of (dockerfile, tar)
      url:
        type: string
        description: Url of dockerfile or tarfile.
        required: True
      username:
        type: string
        required: false
        default: ""
        description: Username for authentication (if needed) for dockerfile or tarfile
      password:
        type: string
        required: false
        default: ""
        description: Password for authentication (if needed) for dockerfile or tarfile
      build_context:
        type: mytypes.BuildContext
        required: false
        default: ""
        description: BuildContext used . Can be used with type -> dockerfile.


  mytypes.BuildContext:
    derived_from: map
    description: Git repo with buildcontext for dockerfile. Name of element is mapped to target dir name.
    properties:
      dir_name:
        type: string
        description: Name of dir with build context
        required: true
      subdir:
        type: string
        description: Path to subdirectory with build context
        required: false
        default: ""
      path:
        type: string
        description: Path to dir with build context
        required: false
        default: ""
      url:
        type: string
        description: Url of git repo
        required: false
        default: ""
      username:
        type: string
        required: false
        default: ""
        description: Username for authentication (if needed) for git repo
      password:
        type: string
        required: false
        default: ""
        description: Password for authentication (if needed) for git repo

  mytypes.ImageVariant:
    derived_from: map
    description: Image variant to build.
    properties:
      image:
        type: string
        description: Image name
      tag:
        type: string
        description: Image tag
      base:
        type: string
        description: Base image to inject

  mytypes.Target:
    derived_from: map
    description: Destination for built image.
    properties:
      registry_ip:
        type: string
        required: true
        description: ip of docker registry
      image_name:
        type: string
        required: true
        description: Target docker image name.
      image_tag:
        type: string
        required: true
        description: Target docker image tag.
      images:
        type: list
        default: []
        required: false
        description: List of image variants to build.
        entry_schema:
          type: mytypes.ImageVariant

node_types:
  my.nodes.image.builder:
    derived_from: tosca.nodes.Compute
    properties:
      source:
        type: mytypes.Source
        required: true
        description: Source for image.

      target:
        type: mytypes.Target
        required: true
        description: Target name for docker image

      custom_workdir:
        type: string
        required: false
        description: Dir name of custom workdir, relative to build.yml playbook
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              source:  { default: { get_property: [ SELF, source ] } }
              target:  { default: { get_property: [ SELF, target ] } }
              custom_workdir:  { default: { get_property: [ SELF, custom_workdir ] } }
            implementation:
              primary: playbooks/builder/build.yml
topology_template:

  inputs:
    source:
      type: mytypes.Source

    target:
      type: mytypes.Target

    custom_workdir:
      type: string
      required: False

  node_templates:
    my-workstation:
      type: tosca.nodes.Compute
      attributes:
        private_address: localhost
        public_address: localhost

    image-builder:
      type: my.nodes.image.builder
      requirements:
        - host: my-workstation
      properties:
        source: { get_input: source }
        target: { get_input: target }
        custom_workdir: {get_input: custom_workdir }
